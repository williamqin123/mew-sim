{"version":3,"sources":["components/sim-control.jsx","components/mew-force-control.jsx","components/viewer-canvas.jsx","components/view-selector.jsx","components/viewer.jsx","components/header.jsx","components/loading-screen.jsx","components/info-bar.jsx","components/posture-control.jsx","components/daily-time-allocation-control.jsx","Simulator.jsx","index.js"],"names":["SimControl","className","this","props","name","children","Component","MewForceControl","type","min","max","step","value","onChange","ViewerCanvas","styles","fontSize","ref","React","createRef","paint","drawImage","current","getContext","ctx","frameToPaint","overlayEnabled","globalAlpha","overlay","style","width","resolution","height","ViewSelector","internalName","displayText","data-view-mode","activeView","href","onClick","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","getDropdownItem","onToggleOverlay","Viewer","state","viewData","viewName","setState","viewModes","setView","viewMode","e","target","dataset","images","Math","round","getCurrentFrame","initialFrameIndex","handleViewChange","handleOverlaySwitch","folder","viewer","currentFrame","idealChadFrameIndex","Header","simulationRunning","onStopButtonClick","onRunButtonClick","getPrimaryButton","simulationChanged","disabled","onResetButtonClick","LoadingScreen","position","background","top","left","bottom","right","zIndex","color","justifyContent","textAlign","role","aria-valuenow","aria-valuemin","aria-valuemax","percentLoaded","InfoBar","years","days","floor","parseDaysToYearsAndDays","elapsedDays","simSpeed","toFixed","log10","onSpeedChange","PostureControl","DailyTimeAllocControl","start","connect","orientation","range","onSlide","Simulator","viewersInit","FRAME_RANGE","IDEAL_CHAD_FRAME","initialSimState","mewForce","mouthBreathingTime","mewingTime","noseBreathingNoMewingTime","postureRating","handleMewForceChange","setSimState","currentTarget","updateSimControls","handlePostureChange","handleScheduleChange","render","handle","un","percent","viewers","hasChangedSinceInitial","simState","animationFrameRequest","DAYS_PER_MS","lastUpdate","update","RANDOMNESS","randFactor","random","time","Date","now","timeDelta","ss","calcMewChange","updateViewers","scheduleUpdate","handleSpeedChange","startSimulation","stopSimulation","resetSimulation","cancelAnimationFrame","loadImages","stuffToSet","callback","newSimState","Object","assign","simControls","progress","forEach","vm","i","push","totalImages","numLoaded","tasks","vmName","vmData","frameNum","img","Image","src","process","toString","padStart","onload","updateLoadingProgress","entries","t","x","exp","abs","sign","curve","requestAnimationFrame","Fragment","app","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.295d71d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SimControl extends Component {\n\n    render() {\n        return (\n            <div className=\"card shadow mb-3\">\n                <div className=\"card-body\">\n                    <h3 className='mb-0'>{this.props.name}</h3>\n                    <hr />\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default SimControl;","import React, { Component } from 'react';\nimport SimControl from './sim-control';\n\nclass MewForceControl extends SimControl {\n\n    render() { \n        return (\n            <SimControl name='Mewing Force'>\n                <div className=\"input-group mb-3\">\n                    <div className=\"input-group-prepend flex-grow-1\">\n                        <div className=\"input-group-text\">Soft</div>\n                        <div className=\"input-group-text flex-grow-1\">\n                            <input type='range' className='form-control-range' min='0' max='10000' step='1' value={this.props.value} onChange={this.props.onChange} />\n                        </div>\n                    </div>\n                    <div className=\"input-group-append\">\n                        <div className=\"input-group-text\">Hard</div>\n                    </div>\n                </div>\n                Force: {this.props.value} Newtons\n            </SimControl>\n        )\n    }\n}\n \nexport default MewForceControl;","import React, { Component } from 'react';\n\nclass ViewerCanvas extends Component {\n\n    static resolution = [512, 512];\n\n    styles = {\n        fontSize: 0\n    }\n\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n\n    componentDidUpdate() {\n        this.paint();\n    }\n\n    componentDidMount() {\n        this.paint();\n    }\n\n    paint() {\n        this.drawImage(this.ref.current.getContext(\"2d\"));\n    }\n\n    drawImage(ctx) {\n        ctx.drawImage(this.props.frameToPaint, 0, 0);\n\n        if (this.props.overlayEnabled) {\n            ctx.globalAlpha = 0.5;\n            ctx.drawImage(this.props.overlay, 0, 0);\n            ctx.globalAlpha = 1;\n        }\n    }\n  \n    render() {\n        return <canvas ref={this.ref} style={this.styles} className='viewer-canvas' width={ViewerCanvas.resolution[0]} height={ViewerCanvas.resolution[1]}></canvas>\n    }\n}\n\nexport default ViewerCanvas;","import React, { Component } from 'react';\n\nclass ViewSelector extends Component {\n\n    getDropdownItem(internalName, displayText) {\n        return <a data-view-mode={internalName} className={\"dropdown-item\" + (this.props.activeView === internalName ? ' active' : '')} href=\"#\" onClick={this.props.onChange}>{displayText}</a>;\n    }\n\n    render() { \n        return (\n            <div className='settings'>\n                <span className=\"dropdown dropup mr-2\">\n                    <button className=\"btn btn-sm btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    Switch View\n                    </button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        <h6 className=\"dropdown-header\">Live Views</h6>\n                        {this.getDropdownItem('front', 'Front')}\n                        {this.getDropdownItem('profile', 'Profile')}\n                        {this.getDropdownItem('34', '3/4')}\n                        {this.getDropdownItem('low', 'Low Angle')}\n                        <div className=\"dropdown-divider\"></div>\n                        <h6 className=\"dropdown-header\">Static Views</h6>\n                        {this.getDropdownItem('ideal-profile', 'Ideal Profile')}\n                    </div>\n                </span>\n                <button type=\"button\" className={\"btn btn-sm btn-outline-primary\" + (this.props.overlayEnabled ? ' active' : '')} onClick={this.props.onToggleOverlay}>\n                    Overlay\n                </button>\n            </div>\n        );\n    }\n}\n \nexport default ViewSelector;","import React, { Component } from 'react';\nimport ViewerCanvas from './viewer-canvas';\nimport ViewSelector from './view-selector';\nimport Simulator from '../Simulator';\n\nclass Viewer extends Component {\n\n    static viewModes = {\n        'front': {\n            folder: 'front',\n            getCurrentFrame: (viewer) => { return viewer.props.currentFrame }\n        },\n        'profile' : {\n            folder: 'profile',\n            getCurrentFrame: (viewer) => { return viewer.props.currentFrame }\n        },\n        '34': {\n            folder: '34',\n            getCurrentFrame: (viewer) => { return viewer.props.currentFrame }\n        },\n        'low': {\n            folder: 'low',\n            getCurrentFrame: (viewer) => { return viewer.props.currentFrame }\n        },\n        'original-profile': {\n            folder: 'profile',\n            getCurrentFrame: (viewer) => { return viewer.props.initialFrameIndex }\n        },\n        'ideal-profile': {\n            folder: 'profile',\n            getCurrentFrame: (viewer) => { return viewer.props.idealChadFrameIndex }\n        }\n    };\n\n    state = {\n        viewData: null,\n        viewName: null,\n        overlayEnabled: false\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    setView(viewName) {\n        this.setState({\n            viewData: Viewer.viewModes[viewName],\n            viewName: viewName\n        });\n    }\n\n    componentWillMount() {\n        this.setView(this.props.viewMode);\n    }\n\n    handleViewChange(e) {\n        this.setView(e.target.dataset.viewMode);\n    }\n\n    handleOverlaySwitch(e) {\n        this.setState({overlayEnabled: !this.state.overlayEnabled});\n    }\n\n    render() {\n        return (\n            <div className='viewer'>\n                <ViewerCanvas frameToPaint={this.state.viewData.images[Math.round(this.state.viewData.getCurrentFrame(this))]} overlay={this.state.viewData.images[Math.round(this.props.initialFrameIndex)]} overlayEnabled={this.state.overlayEnabled} />\n                <ViewSelector activeView={this.state.viewName} onChange={(e) => {this.handleViewChange(e)}} overlayEnabled={this.state.overlayEnabled} onToggleOverlay={(e) => {this.handleOverlaySwitch(e)}}/>\n            </div>\n        );\n    }\n}\n \nexport default Viewer;","import React, { Component } from 'react';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    getPrimaryButton() {\n        if (this.props.simulationRunning) {\n            return <button className=\"btn btn-danger mr-2\" type=\"button\" onClick={this.props.onStopButtonClick}>Stop Simulation</button>;\n        }\n        return <button className=\"btn btn-success mr-2\" type=\"button\" onClick={this.props.onRunButtonClick}>Start Simulation</button>;\n    }\n\n    render() { \n        return (\n            <header className=\"navbar navbar-light bg-light justify-content-between border-bottom shadow-sm\">\n                <h1 className=\"navbar-brand h1 mb-0\">\n                    <span className='bigger-text-if-big-window'>\n                        MewSim\n                    </span>\n                </h1>\n                <span>\n                    {this.getPrimaryButton()}\n                    <button className={`btn btn-${this.props.simulationChanged ? '' : 'outline-'}secondary`} type=\"button\" disabled={!this.props.simulationChanged} onClick={this.props.onResetButtonClick}>Reset Simulation</button>\n                </span>\n            </header>\n        );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\n\nclass LoadingScreen extends Component {\n\n    styles = {\n        position: 'fixed',\n        background: 'var(--cyan)',\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n        zIndex: 10,\n        color: 'white',\n        justifyContent: 'space-evenly',\n        textAlign: 'center'\n    }\n\n    render() {\n        return (\n            <div id='loading-screen' className='d-flex flex-column align-items-center' style={this.styles}>\n                <div></div>\n                <div>\n                    <h1 className='display-1 mb-3'>MewSim</h1>\n                    <p className='lead mb-0'>The Premier Mewing Simulator</p>\n                </div>\n                <div className=\"progress\">\n                    <div className=\"progress-bar progress-bar-striped progress-bar-animated bg-warning\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: this.props.percentLoaded + '%'}}></div>\n                </div>\n                <div></div>\n            </div>\n        );\n    }\n}\n \nexport default LoadingScreen;","import React, { Component } from 'react';\n\nclass InfoBar extends Component {\n\n    parseDaysToYearsAndDays(value) {\n        var years, days;\n        \n        years = value >= 365 ? Math.floor(value / 365) : 0;\n        days = years ? value - (years*365) : value;\n\n        return (years > 0 ? `${years} years, ` : '') + days + ' days';\n    }\n\n    render() { \n        return (\n            <div className=\"navbar navbar-light bg-light border-bottom justify-content-between\" id='info-bar'>\n                <strong className='bigger-text-if-big-window'>Elapsed Time: {this.parseDaysToYearsAndDays(Math.round(this.props.elapsedDays))}</strong>\n                <div>\n                    <label className='mb-1'>Sim Speed: <strong>{this.props.simSpeed.toFixed(2)}</strong>x</label>\n                    <input type='range' className='form-control-range' min='-1' max='1' step='any' value={Math.log10(this.props.simSpeed)} onChange={this.props.onSpeedChange} />\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default InfoBar;","import React, { Component } from 'react';\nimport SimControl from './sim-control';\n\nclass PostureControl extends SimControl {\n\n    render() { \n        return (\n            <SimControl name='Head Posture'>\n                <div className=\"input-group mb-0\">\n                    <div className=\"input-group-prepend flex-grow-1\">\n                        <div className=\"input-group-text\">Forward</div>\n                        <div className=\"input-group-text flex-grow-1\">\n                            <input type='range' className='form-control-range' min='0' max='10' step='any' value={this.props.value} onChange={this.props.onChange} />\n                        </div>\n                    </div>\n                    <div className=\"input-group-append\">\n                        <div className=\"input-group-text\">Chintuck</div>\n                    </div>\n                </div>\n            </SimControl>\n        )\n    }\n}\n \nexport default PostureControl;","import React, { Component } from 'react';\nimport SimControl from './sim-control';\n\nimport Nouislider from \"nouislider-react\";\nimport \"nouislider/distribute/nouislider.css\";\n\nclass DailyTimeAllocControl extends SimControl {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() { \n        return (\n            <SimControl name='Daily Time Allocation'>\n                <div id='range-slider' className='mb-2'>\n                    <Nouislider\n                        key='time-ranges'\n                        id='time-ranges'\n                        start={[8, 16]}\n                        connect={[true, true, true]}\n                        orientation=\"horizontal\"\n                        range={{\n                            min: 0,\n                            max: 24\n                        }}\n                        onSlide={this.props.onChange}\n                    />\n                </div>\n                <div className='row bigger-text-if-big-window'>\n                    <div className='col text-danger'>\n                        <small>\n                            <h6>Mouth-Breathing</h6>\n                            {this.props.value[0].toFixed(1)} hours\n                        </small>\n                    </div>\n                    <div className='col text-success'>\n                        <small>\n                            <h6>Mewing</h6>\n                            {this.props.value[1].toFixed(1)} hours\n                        </small>\n                    </div>\n                    <div className='col text-secondary'>\n                        <small>\n                            <h6>Nose-Breathing, Not Mewing</h6>\n                            {this.props.value[2].toFixed(1)} hours\n                        </small>\n                    </div>\n                </div>\n            </SimControl>\n        )\n    }\n}\n \nexport default DailyTimeAllocControl;","import React, { Component } from 'react';\nimport Viewer from './components/viewer';\nimport MewForceControl from './components/mew-force-control';\nimport Header from './components/header';\nimport LoadingScreen from './components/loading-screen';\nimport InfoBar from './components/info-bar';\nimport PostureControl from './components/posture-control';\nimport DailyTimeAllocControl from './components/daily-time-allocation-control';\n\nclass Simulator extends Component {\n\n    viewersInit = [\n        'front',\n        '34',\n        'profile',\n        'low'\n    ]\n\n    FRAME_RANGE = [0, 375];\n\n    IDEAL_CHAD_FRAME = 105;\n\n    initialSimState = {\n        currentFrame: 75,\n        elapsedDays: 0,\n        mewForce: 0,\n        mouthBreathingTime: 8,\n        mewingTime: 8,\n        noseBreathingNoMewingTime: 8,\n        postureRating: 10,\n        simSpeed: 1\n    }\n\n    setSimState(stuffToSet, callback) {\n        let newSimState = Object.assign({...this.ss}, stuffToSet);\n        this.setState({simState: newSimState}, callback);\n    }\n\n    handleMewForceChange = (e) => {\n        this.setSimState({\n            mewForce: e.currentTarget.value\n        });\n        this.updateSimControls();\n    }\n\n    handlePostureChange = (e) => {\n        this.setSimState({\n            postureRating: e.currentTarget.value\n        });\n        this.updateSimControls();\n    }\n\n    handleScheduleChange = (render, handle, value, un, percent) => {\n        this.setSimState({\n            mouthBreathingTime: value[0],\n            mewingTime: value[1] - value[0],\n            noseBreathingNoMewingTime: 24 - value[1]\n        });\n        this.updateSimControls();\n    }\n\n\n    viewers = []\n\n    state = {\n        percentLoaded: 0,\n        simulationRunning: false,\n        hasChangedSinceInitial: false,\n        simState: {...this.initialSimState},\n        animationFrameRequest: null\n    }\n\n    updateSimControls() {\n        this.simControls = [\n            <MewForceControl key='mew-force-control' id='mew-force-control' value={this.ss.mewForce} onChange={this.handleMewForceChange} />,\n            <DailyTimeAllocControl key='time-control' id='time-control' value={[this.ss.mouthBreathingTime, this.ss.mewingTime, this.ss.noseBreathingNoMewingTime]} onChange={this.handleScheduleChange} />,\n            <PostureControl key='posture-control' id='posture-control' value={this.ss.postureRating} onChange={this.handlePostureChange} />\n        ];\n    }\n\n    updateLoadingProgress(progress) {\n        if (progress >= 1) {\n            this.updateViewers();\n        }\n        this.setState({percentLoaded: progress * 100});\n    }\n\n    updateViewers() {\n        let viewers = [];\n        this.viewersInit.forEach((vm, i) => {\n            const id = 'viewer' + i;\n            const viewer = <Viewer id={id} key={id} viewMode={vm} currentFrame={this.ss.currentFrame} initialFrameIndex={this.initialSimState.currentFrame} idealChadFrameIndex={this.IDEAL_CHAD_FRAME} />;\n            viewers.push(viewer);\n        });\n\n        this.viewers = viewers;\n    }\n\n    loadImages() {\n\n        let totalImages = 0;\n        let numLoaded = 0;\n\n        let tasks = [];\n    \n        for (const [vmName, vmData] of Object.entries(Viewer.viewModes)) {\n            Viewer.viewModes[vmName].images = [];\n    \n            for (let frameNum = this.FRAME_RANGE[0]; frameNum <= this.FRAME_RANGE[1]; frameNum++) {\n                totalImages++;\n    \n                let img = new Image();\n\n                tasks.push(() => {\n                    img.src = `${process.env.PUBLIC_URL}/frames/${vmData.folder}/${frameNum.toString().padStart(4, '0')}.jpg`;\n                });\n    \n                img.onload = () => {\n                    numLoaded++;\n                    this.updateLoadingProgress(numLoaded / totalImages);\n                };\n    \n                Viewer.viewModes[vmName].images.push(img);\n            }\n        }\n\n        tasks.forEach((t) => t());\n    }\n\n    constructor(props) {\n        super(props);\n        this.loadImages();\n        this.updateSimControls();\n    }\n\n    curve(x, exp) {\n        return Math.abs(x)**exp * Math.sign(x);\n    }\n\n    get ss() {\n        return this.state.simState;\n    }\n\n    DAYS_PER_MS = 0.02;\n\n    lastUpdate = 0;\n\n    calcMewChange() {\n        return (((this.ss.mewForce / 75 + 10) * this.ss.mewingTime -\n        this.ss.mouthBreathingTime * 25 -\n        this.ss.noseBreathingNoMewingTime * 5 +\n        (this.ss.postureRating - 7) * 25) / 1000 - this.curve(this.ss.currentFrame * (this.ss.currentFrame - this.initialSimState.currentFrame) / 10000, 0.75)) / 10;\n    }\n\n    scheduleUpdate() {\n        this.setState({animationFrameRequest: requestAnimationFrame(this.update)});\n    }\n\n    update = () => {\n\n        const RANDOMNESS = 0.0001;\n        const randFactor = 1 + Math.random() * RANDOMNESS - RANDOMNESS / 2;\n\n        const time = Date.now();\n        const timeDelta = time - this.lastUpdate;\n\n        this.setSimState({\n            currentFrame: Math.max(Math.min(this.ss.currentFrame + this.calcMewChange() * randFactor * this.ss.simSpeed, this.FRAME_RANGE[1]), this.FRAME_RANGE[0]),\n            elapsedDays: this.ss.elapsedDays + this.ss.simSpeed * timeDelta * this.DAYS_PER_MS\n        });\n\n        this.updateViewers();\n\n        if (this.state.simulationRunning) this.scheduleUpdate();\n\n        this.lastUpdate = time;\n    }\n\n    handleSpeedChange = (e) => {\n        this.setSimState({\n            simSpeed: 10**e.currentTarget.value\n        });\n    }\n\n    startSimulation = () => {\n        this.setState({\n            simulationRunning: true,  hasChangedSinceInitial: true\n        });\n        this.lastUpdate = Date.now();\n        this.scheduleUpdate();\n    }\n\n    stopSimulation = () => {\n        this.setState({\n            simulationRunning: false\n        });\n    }\n\n    resetSimulation = () => {\n        cancelAnimationFrame(this.state.animationFrameRequest);\n        this.setSimState({\n            currentFrame: this.initialSimState.currentFrame,\n            elapsedDays: this.initialSimState.elapsedDays\n        }, () => {\n            this.updateViewers();\n            this.setState({simulationRunning: false, hasChangedSinceInitial: false});\n        });\n    }\n\n    render() {\n        return <React.Fragment>\n            {this.state.percentLoaded >= 100 ? null : <LoadingScreen percentLoaded={this.state.percentLoaded} />}\n            <Header simulationChanged={this.state.hasChangedSinceInitial} simulationRunning={this.state.simulationRunning} onRunButtonClick={this.startSimulation} onStopButtonClick={this.stopSimulation} onResetButtonClick={this.resetSimulation} />\n            <InfoBar elapsedDays={this.ss.elapsedDays} simSpeed={this.ss.simSpeed} onSpeedChange={this.handleSpeedChange}/>\n            <main className='d-flex align-items-stretch justify-content-center'>\n                <div id='viewers-pane'>\n                    {this.viewers}\n                </div>\n                <div id='control-pane' className='flex-grow-1 text-center'>\n                    <div className='p-4 p-sm-5'>\n                        <h2 className='mb-0'>Parameters</h2>\n                        <hr />\n                        {this.simControls}\n                    </div>\n                </div>\n            </main>\n        </React.Fragment>;\n    }\n}\n \nexport default Simulator;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'jquery/dist/jquery.min.js'\nimport 'bootstrap/dist/js/bootstrap.min.js'\n\nimport './index.scss';\n\nimport MewForceControl from './components/mew-force-control';\nimport Simulator from './Simulator';\nimport Viewer from './components/viewer';\n\nconst app = <Simulator />;\n\nReactDOM.render(app, document.getElementById('root'));\n"],"sourceRoot":""}